{
  "exerciseSheet": false,
  "blocks": [
    {
      "type": "text",
      "text": "# Tutorial: Getting used to Waterproof\n\nThis tutorial explains how to get started with Waterproof. The aim of Waterproof is to help learning how to prove mathematical statements.\n\nThis tutorial is in the form of an **exercise sheet** (sometimes we will call it a **notebook**). It is a mix of explanations and exercises in which you can try proving mathematical statements yourself. \n\nThe exercise sheet contains **text cells** (white background) and **code cells** (gray background). So far, we have been writing text, in text cells. But now we will introduce the first code cell.\n"
    },
    {
      "type": "code",
      "text": "Require Import Reals.\n\nRequire Import wplib.Tactics.Tactics.\nRequire Import wplib.Tactics.TacticsContra.\nRequire Import wplib.Notations.Notations."
    },
    {
      "type": "text",
      "text": "The code consists of four sentences. Every sentence finishes with a period. In these four sentences, libraries are imported that are necessary to make the rest of the notebook work."
    },
    {
      "type": "text",
      "text": "\nWe recommend that while you read this notebook, you execute the code sentence-by-sentence by pressing **Alt + ↓**. (Alternatively, you can use the buttons on the left, but it is typically much faster to work with keyboard shortcuts.)"
    },
    {
      "type": "text",
      "text": "## A first example of a lemma\n\nIn the following code cell, we introduce a **lemma**. We called the lemma **example_reflexivity**."
    },
    {
      "type": "code",
      "text": "Lemma example_reflexivity :\n  0 = 0."
    },
    {
      "type": "text",
      "text": "\nWe will now prove the lemma. We start the proof by writing the sentence `\"Proof.\"` in a code cell."
    },
    {
      "type": "code",
      "text": "\nProof."
    },
    {
      "type": "text",
      "text": "\nExecute the code sentence after sentence (press **Alt + ↓**), until a blue checkmark appears in place of the period after `Proof.`. The checkmark means that Waterproof has checked every sentence before the checkmark. Note how in the part of the screen under **Proof progress** (either on the right of the screen, or down below) appeared what we need to show, namely `(0=0)`. We will often refer to this as the current **goal**."
    },
    {
      "type": "text",
      "text": "\nNext, we tell Waterproof what to do to prove the lemma. For such a simple statement, we can just write and execute the sentence `\"It holds that (0=0).\"` and Waterproof will check automatically that this holds. We will often refer to executing such a sentence as **applying a tactic.**"
    },
    {
      "type": "code",
      "text": "\nIt holds that (0 = 0)."
    },
    {
      "type": "text",
      "text": "\nExecute the above sentence, with **Alt + ↓**, until the checkmark appears after the sentence. Note how under proof progress it says `Done.`. The lemma is proved! We close the proof by writing `Qed.`."
    },
    {
      "type": "code",
      "text": "\nQed."
    },
    {
      "type": "text",
      "text": "\n**HINT:** When writing `It holds that (...)`, it is important that at the place of the dots you write the current goal (which you can see under **Proof progress**), and not another statement.\n\n**HINT:** If you click on the hammer symbol on the top right, a list of tactics will open. You can click on any of the tactics, and the tactic will be inserted in the text, usually with some placeholders that you need to fill in."
    },
    {
      "type": "text",
      "text": "## Try it yourself\n\nYou can now try this for yourself. We prepared a lemma below, that we named **exercise_reflexivity**."
    },
    {
      "type": "code",
      "text": "Lemma exercise_reflexivity :\n  3 = 3.\nProof."
    },
    {
      "type": "input",
      "start": true,
      "id": "input-1"
    },
    {
      "type": "text",
      "text": "The blue brackets mean that this is an input cell. You can freely work here. Move the mouse just below the blue bracket until a blue, horizontal line appears and click on it. Then, you can add a code cell by pressing **Alt + c** (On MacOS: **Ctrl + c**), and add a text cell by pressing **Alt + t** (On MacOS: **Ctrl + t**).\n\nYou can also change the text in this text cell by clicking on it.\n\nBelow we already added one code cell, which says `Admitted.`. Executing that code cell (**Alt + ↓**), will also make the proof progress turn to `Done.` **However,** in that case it is not proven but assumed as an axiom. We do this so you can continue executing the notebook even if you cannot solve the exercise.\n\nAfter you have found a proof, replace the `Admitted.` by `Qed.` (click on the code cell and change the sentence)."
    },
    {
      "type": "code",
      "text": "\nAdmitted."
    },
    {
      "type": "input",
      "start": false,
      "id": "input-1"
    },
    {
      "type": "text",
      "text": "## Taking arbitrary values to show *for-all* statements\n\nLet us consider the following lemma."
    },
    {
      "type": "code",
      "text": "Lemma every_x_equal_to_itself :\n  for all x : ℝ,\n    x = x."
    },
    {
      "type": "text",
      "text": "> **NOTE:** the notation $x : ℝ$ means $x$ is in $\\mathbb{R}$ (or more accurately, $x$ is of type $\\mathbb{R}$) may be unfamiliar to you, and you may be more familiar with the notation $x ∈ \\reals$. This difference is due to the fact that Waterproof is built on **type theory** and not on set theory. \n\n**HINT:** You can insert characters such as ℝ either from the symbol menu that opens when clicking on 'Σ' in the top right corner, or you can write '\\reals'. For many other unicode characters you can use a backslash command as well."
    },
    {
      "type": "code",
      "text": "\nProof."
    },
    {
      "type": "text",
      "text": "\nTo show a statement like \"for all $x : \\mathbb{R}$, ...\", you first need to take an arbitrary $x : \\mathbb{R}$. We do this by writing and executing the following sentence, i.e. by applying the following **tactic**."
    },
    {
      "type": "code",
      "text": "\nTake x : ℝ."
    },
    {
      "type": "text",
      "text": "\nAfter taking $x : \\mathbb{R}$, we are back in a situation we are by now familiar with. We finish the proof as before."
    },
    {
      "type": "code",
      "text": "\nIt holds that (x = x).\nQed."
    },
    {
      "type": "text",
      "text": "## Try it yourself\n\nTry to complete the proof of the following lemma."
    },
    {
      "type": "code",
      "text": "Lemma exercise :\n  for all x : ℝ,\n    x + 3 = 3 + x.\nProof."
    },
    {
      "type": "input",
      "start": true,
      "id": "input-2"
    },
    {
      "type": "text",
      "text": "Write your solution here. After you have found a proof, remember to change the `Admitted.` below to `Qed.`."
    },
    {
      "type": "code",
      "text": "\nAdmitted."
    },
    {
      "type": "input",
      "start": false,
      "id": "input-2"
    },
    {
      "type": "text",
      "text": "## Choosing values for *there-exists* statements\n\nIf you want to show that *there exists* $y : \\mathbb{R}$ such that $(\\dots)$, you need to **choose** a candidate for $y$, and continue showing $(\\dots)$ with your choice."
    },
    {
      "type": "code",
      "text": "Lemma example_choosing : \n  there exists y : ℝ,\n    y = 3."
    },
    {
      "type": "code",
      "text": "\nProof."
    },
    {
      "type": "text",
      "text": "\nWe first choose $y=3$ by using the tactic `Choose y := ((* value *)).`."
    },
    {
      "type": "code",
      "text": "\nChoose y := (3)."
    },
    {
      "type": "text",
      "text": "\n(In this particular case we could also have written `Choose y := 3`, but in general the brackets are important.)\n\nWe now need to show that (y=3) (see **Proof progress** after executing the previous sentence). We can record this for our own convenience."
    },
    {
      "type": "code",
      "text": "\nWe need to show that (y = 3)."
    },
    {
      "type": "text",
      "text": "\nWe can also use the `We need to show that ` tactic to slightly reformulate the goal."
    },
    {
      "type": "code",
      "text": "\nWe need to show that (3 = 3)."
    },
    {
      "type": "code",
      "text": "\nIt holds that (3 = 3).\nQed."
    },
    {
      "type": "text",
      "text": "## Try it yourself: choosing values"
    },
    {
      "type": "code",
      "text": "Lemma exercise_choosing :\n  for all x : ℝ,\n    there exists z : ℝ,\n      x < z - 2.\nProof."
    },
    {
      "type": "input",
      "start": true,
      "id": "input-3"
    },
    {
      "type": "text",
      "text": "Write your solution here..."
    },
    {
      "type": "code",
      "text": "\nAdmitted."
    },
    {
      "type": "input",
      "start": false,
      "id": "input-3"
    },
    {
      "type": "text",
      "text": "## Making assumptions\n\nThe following lemma expresses that for all $a : \\mathbb{R}$, if $a < 0$ then ($-a > 0$)."
    },
    {
      "type": "code",
      "text": "\nLemma example_assumptions :\n  ∀ a : ℝ, a < 0 ⇒ - a > 0."
    },
    {
      "type": "text",
      "text": "Before we prove the lemma, let us first add some brackets that indicate how to read such an expression:\n\n$∀ a : ℝ, \\Big( (a < 0) ⇒ (- a > 0)\\Big).$"
    },
    {
      "type": "text",
      "text": "In particular, after the comma after a for-all quantifier, after the comma after a there-exists statement, and after an implication arrow, there are implicit brackets around everything that follows after. \n\nLet us now start to prove the lemma."
    },
    {
      "type": "code",
      "text": "\nProof."
    },
    {
      "type": "text",
      "text": "\nBecause we need to show a for-all statement, we know how to start the proof."
    },
    {
      "type": "code",
      "text": "\nTake a : ℝ."
    },
    {
      "type": "text",
      "text": "\nIf you now execute the code up to previous sentence, you can see in the **Proof progress** that we need to show `a < 0 ⇒ -a > 0.` Remembering the rules for brackets, this means:"
    },
    {
      "type": "code",
      "text": "We need to show that \n  ((a < 0) ⇒ (-a > 0))."
    },
    {
      "type": "text",
      "text": "\nIn words, if $a < 0$ then ($- a > 0$). To show this we need to assume that $a < 0$, and then continue proving that $(-a > 0)$. We can make such an assumption with the following sentence."
    },
    {
      "type": "code",
      "text": "\nAssume a_lt_0 : (a < 0)."
    },
    {
      "type": "text",
      "text": "\nThe **name** of this assumption is in this case **a_lt_0**. What you are actually assumping is written after the colon, namely **a < 0**. Note how after executing the sentence, the assumption $a < 0$ is added under **Proof progress** with the name **a_lt_0**.\n\nWe finish the proof."
    },
    {
      "type": "code",
      "text": "We need to show that (-a > 0).\nIt holds that (-a > 0).\nQed."
    },
    {
      "type": "text",
      "text": "## Try it yourself\n\nYou can practice making assumptions by proving the lemma below. We have added brackets in the statement to help in reading it, but we didn't have to: the lemma would have exactly the same meaning if we would have left out the brackets."
    },
    {
      "type": "code",
      "text": "Lemma exercise_assumptions :\n  ∀ a : ℝ, (∀ b : ℝ, ( a > 0 ⇒ (b > 0 ⇒ a + b > 0))).\n  \nProof."
    },
    {
      "type": "input",
      "start": true,
      "id": "input-6"
    },
    {
      "type": "text",
      "text": "Write your solution here..."
    },
    {
      "type": "code",
      "text": "\nAdmitted."
    },
    {
      "type": "input",
      "start": false,
      "id": "input-6"
    },
    {
      "type": "text",
      "text": "## Intermezzo about sets\n\nIn Waterproof, we think of subsets of the real line as functions from the real line to the type of propositions, i.e. the type of mathematical statements. An example of a subset is"
    },
    {
      "type": "code",
      "text": "\nDefinition A := fun (x : ℝ) ↦ x < 1."
    },
    {
      "type": "text",
      "text": "\nThis notation defines $A$ as a function that sends $x : ℝ$ to the proposition $x < 1$.\nTherefore, $A$ corresponds to those $x : ℝ$ such that $x < 1$, i.e. it corresponds to the interval $(-\\infty, 1)$. \n\nSimilarly, we can define the subset $B$ by"
    },
    {
      "type": "code",
      "text": "\n\nDefinition B := fun (x : ℝ) ↦ (0 ≤ x) ∧ (x ≤ 2)."
    },
    {
      "type": "text",
      "text": "\nThen, $B$ corresponds to those $x : ℝ$ such that $(0 \\leq x)$ and $(x \\leq 2)$, so it corresponds to the closed interval $[0,2]$.\n\nWe will now use simple sets and statements about them to illustrate more proof tactics in Waterproof."
    },
    {
      "type": "text",
      "text": "## Expanding definitions: example on upper bounds.\n\nRemember that we have defined $A$ in the last section as the interval $(-\\infty, 1)$. The following lemma expresses that $1$ is an upper bound for $A$. In Waterproof, the statement is encoded as `is_upper_bound A 1`."
    },
    {
      "type": "code",
      "text": "Lemma example_upper_bound :\n  is_upper_bound A 1.\n  \nProof."
    },
    {
      "type": "text",
      "text": "First we expand the definition of `is_upper_bound`."
    },
    {
      "type": "code",
      "text": "\nExpand the definition of is_upper_bound."
    },
    {
      "type": "text",
      "text": "\nIf you execute the proof to the previous sentence, you will observe that in the **Proof progress** window, `is_upper_bound` in the goal has been replaced by its definition. It is good practice to repeat the goal also in the proof itself, to increase the readability."
    },
    {
      "type": "code",
      "text": "\nWe need to show that (for all x : ℝ, A x ⇒ x ≤ 1)."
    },
    {
      "type": "text",
      "text": "\nA good way to read `A x ⇒ x ≤ 1` is \"if $x$ is in $A$, then $x \\leq 1$\". Although this may be a bit confusing at first, note that we **do not and cannot** write $x : A$ for \"$x$ is in $A$\". You could, however, write `x ∈ A`, which is just alternative notation for `A x`.\n \nSince we need to show a \"for-all\" statement, it is clear how to continue the proof."
    },
    {
      "type": "code",
      "text": "\nTake x : ℝ. Assume x_in_A : (x ∈ A)."
    },
    {
      "type": "text",
      "text": "\nA this stage, we may want to use the definition of $A$ itself. We can expand the definition of $A$ in the hypothesis `x_in_A` by writing"
    },
    {
      "type": "code",
      "text": "\nExpand the definition of A in x_in_A."
    },
    {
      "type": "text",
      "text": "\nWe can now finish the proof."
    },
    {
      "type": "code",
      "text": "\nIt holds that (x ≤ 1).\nQed."
    },
    {
      "type": "text",
      "text": "## An alternative way of expanding definitions\n\nThe disadvantage of the above way of expanding definitions is that the written proof above does not contain the result of expanding the definitions. We now present an alternative way of expanding definitions, which instead just states what the result of the expanding should be."
    },
    {
      "type": "code",
      "text": "Lemma example_upper_bound_2 :\n  is_upper_bound A 1.\n  \nProof."
    },
    {
      "type": "text",
      "text": "First, instead of writing `Expand the definition of is_upper_bound.`, we just write"
    },
    {
      "type": "code",
      "text": "\nWe need to show that (∀ x : ℝ, (x ∈ A) ⇒ x ≤ 1)."
    },
    {
      "type": "text",
      "text": "\nWaterproof checks automatically that this comes down to the same thing. We continue the proof."
    },
    {
      "type": "code",
      "text": "\nTake x : ℝ. Assume x_in_A : (x ∈ A)."
    },
    {
      "type": "text",
      "text": "\nWe now would like to expand the definition of $A$ in `x_in_A`. We can just use that the result should come down to `(x < 1)` and write"
    },
    {
      "type": "code",
      "text": "\nWrite x_in_A as (x < 1). "
    },
    {
      "type": "text",
      "text": "\nWe can now finish the proof."
    },
    {
      "type": "code",
      "text": "It follows that (x ≤ 1).\nQed."
    },
    {
      "type": "text",
      "text": "\n**HINT:** the disadvantage of expanding definitions in this way, is that you need to know beforehand what is the result of expanding the definition. In practice, you can then peek at the result by first writing `Expand the definition` to see what is the result and then add a sentence of `We need to show that ...` or `Write ... as ...`. Afterwards, you can delete the sentence with `Expand the definition`."
    },
    {
      "type": "text",
      "text": "## Try it yourself"
    },
    {
      "type": "code",
      "text": "Lemma exercise_any_upp_bd_ge_0 :\n  for all b : ℝ, is_upper_bound A b ⇒ (0 ≤ b).\n  \nProof."
    },
    {
      "type": "input",
      "start": true,
      "id": "input-4"
    },
    {
      "type": "code",
      "text": "Admitted."
    },
    {
      "type": "input",
      "start": false,
      "id": "input-4"
    },
    {
      "type": "text",
      "text": "## Arguing by contradiction and making small steps"
    },
    {
      "type": "code",
      "text": "Lemma example_any_upp_bd_ge_1 :\n  for all b : ℝ, is_upper_bound A b ⇒ (1 ≤ b).\n  \nProof.\nTake b : ℝ. Assume b_upp_bd : (is_upper_bound A b).\nWrite b_upp_bd as (for all x : ℝ, x ∈ A ⇒ x ≤ b).\nWrite b_upp_bd as (for all x : ℝ, x < 1 ⇒ x ≤ b)."
    },
    {
      "type": "text",
      "text": "At this stage, it is useful (though not strictly necessary) to continue with a contradiction argument."
    },
    {
      "type": "code",
      "text": "\nWe argue by contradiction."
    },
    {
      "type": "text",
      "text": "\nObserve how the hypothesis `(¬ (1 ≤ b)` has been added under 'proof progress' after executing the previous line.\n\nWe cannot finish the proof by just writing `It holds that (1 ≤ b)`: Waterproof would not be able to find a proof. Instead we have to make a smaller step in between. We can do this as follows."
    },
    {
      "type": "code",
      "text": "\nIt holds that (b < 1) (b_lt_1)."
    },
    {
      "type": "text",
      "text": "\nThe main difference is that we have added `(b_lt_1)` at the end of the sentence. This is the name we give to the hypothesis."
    },
    {
      "type": "code",
      "text": "\nIt holds that (b < (b+1)/2) (b_lt_av_b_1).\nIt holds that ((b+1)/2 < 1) (av_b_1_lt_1).\n"
    },
    {
      "type": "text",
      "text": "Sometimes Waterproof needs a little help on what to use to prove a certain step. In the following sentence we provide the help by writing `By b_upp_bd`."
    },
    {
      "type": "code",
      "text": "\nBy b_upp_bd it holds that ((b+1)/2 ≤ b) (av_b_1_le_b)."
    },
    {
      "type": "text",
      "text": "\n(Actually, Waterproof doesn't really need the help here, but the proof does get easier to read).\n\nThe last inequality implies that $1 \\leq b$, so we could just finish the proof by writing `It holds that (1 ≤ b)`. However, we will show a different way of finishing the argument. "
    },
    {
      "type": "code",
      "text": "\nIt holds that (1 ≤ b) (H_contradictory)."
    },
    {
      "type": "text",
      "text": "\nAfter executing the above line, we have two contradictory hypothesis listed under 'proof progress', one saying that `(1 ≤ b)` and one saying that `¬(1 ≤ b)`. In case you have two such contradictory hypothesis, you can finish the proof by writing"
    },
    {
      "type": "code",
      "text": "\nContradiction.\nQed."
    },
    {
      "type": "code",
      "text": ""
    },
    {
      "type": "text",
      "text": "## Applying theorems and claims: Example supremum of an interval"
    },
    {
      "type": "code",
      "text": "Lemma example_sup_interval :\n  is_sup A 1."
    },
    {
      "type": "code",
      "text": "Proof.\nExpand the definition of is_sup.\nWe need to show that\n  (is_upper_bound A 1\n     ∧ \n   (for all b : ℝ,\n     is_upper_bound A b ⇒ 1 ≤ b))."
    },
    {
      "type": "text",
      "text": "\n(Note that the first sentence of the proof is not necessary and we could delete it)."
    },
    {
      "type": "text",
      "text": "\nSometimes it can be useful to make intermediate claims. You then first focus on proving that claim, before you continue the rest of the proof. Below we claim that $1$ is an upper bound of $A$ (by writing `(is_upper_bound A 1)` and call the statement `one_upp_bd`."
    },
    {
      "type": "code",
      "text": "\nWe claim that (is_upper_bound A 1) (one_upp_bd)."
    },
    {
      "type": "text",
      "text": "\nVery conveniently, we have already showed this statement in the Lemma `example_upper_bound` above. We can now just apply the lemma by writing"
    },
    {
      "type": "code",
      "text": "\n  Apply example_upper_bound."
    },
    {
      "type": "text",
      "text": "\nWe follow a similar strategy for the second statement in the goal."
    },
    {
      "type": "code",
      "text": "\n\nWe claim that\n  (for all b : ℝ, is_upper_bound A b ⇒ 1 ≤ b)\n  (any_upp_bd_ge_1).\n  Apply example_any_upp_bd_ge_1."
    },
    {
      "type": "text",
      "text": "The two statements from the claims are now listed as hypotheses under 'proof progress', and we can finish the proof."
    },
    {
      "type": "code",
      "text": "\nIt holds that (is_upper_bound A 1\n                 ∧\n              (for all b : ℝ,\n                 is_upper_bound A b ⇒ 1 ≤ b)).\nQed."
    },
    {
      "type": "text",
      "text": "\n## Try it yourself\n\nRecall that $B$ was defined as the interval $[0,2]$. Can you show that the supremum of $B$ is $2$?"
    },
    {
      "type": "code",
      "text": "Lemma sup_B_is_2 :\n  is_sup B 2.\n  \nProof."
    },
    {
      "type": "input",
      "start": true,
      "id": "input-5"
    },
    {
      "type": "code",
      "text": "Admitted."
    },
    {
      "type": "input",
      "start": false,
      "id": "input-5"
    },
    {
      "type": "text",
      "text": "## Defining variables, splitting and rewriting\n\nWith help of the following lemma, we will show a few additional proof techniques."
    },
    {
      "type": "code",
      "text": "Lemma exists_real_number_in_between :\n  for all (a b : ℝ),\n    (a < b) ⇒\n      (there exists c : ℝ,\n        a < c ∧ c < b)."
    },
    {
      "type": "code",
      "text": "Proof.\nTake a : ℝ. Take b : ℝ.\nAssume a_lt_b : (a < b).\nWe need to show that\n  (there exists c : ℝ,\n    a < c ∧ c < b)."
    },
    {
      "type": "text",
      "text": "Sometimes, it is useful to define an auxiliary variable in your proof. Below, we define the real number $d$ by writing"
    },
    {
      "type": "code",
      "text": "\nDefine d := ((a + b)/2)."
    },
    {
      "type": "text",
      "text": "\nWe can now choose $c$ equal to $d$."
    },
    {
      "type": "code",
      "text": "\nChoose c := d.\nWe need to show that (a < d ∧ d < b)."
    },
    {
      "type": "text",
      "text": "We could follow the strategy of the previous section, and first showing separately that $(a < d)$ and $(d< b)$, and then concluding, but here we illustrate a different technique."
    },
    {
      "type": "text",
      "text": "\nWe "
    },
    {
      "type": "code",
      "text": "split"
    },
    {
      "type": "text",
      "text": "the goal into two separate goals"
    },
    {
      "type": "code",
      "text": "."
    },
    {
      "type": "code",
      "text": "We need to show that (a < d)."
    },
    {
      "type": "code",
      "text": "Write a_lt_b using (b = b + 0) as\n  (a < (b + 0))."
    },
    {
      "type": "text",
      "text": "\nWaterproof can not find a proof immediately. We have to help a bit, by saying that it should rewrite $d$ to $(a+b)/2$."
    },
    {
      "type": "code",
      "text": "\nWrite goal using (d = (a + b)/2) as\n  (a < (a + b)/2).\n  It holds that (a < (a + b)/2)."
    },
    {
      "type": "code",
      "text": "We need to show that (d < b).\n  Write goal using (d = (a + b)/2) as\n  ((a + b)/2 < b).\n  It holds that ((a+b)/2 < b).\nQed."
    },
    {
      "type": "text",
      "text": "\nCertainly, the above lemma could be proved more efficiently, but the main idea was to illustrate some proof tactics."
    },
    {
      "type": "text",
      "text": "## Using \"there-exists\" statements"
    },
    {
      "type": "code",
      "text": "Lemma example_using_there_exists :\n  for all x : ℝ,\n    (there exists y : ℝ, y > 10 ∧ x > y) ⇒ (x > 10)."
    },
    {
      "type": "code",
      "text": "Proof.\nTake x : ℝ.\nAssume ex_y : (there exists y:ℝ, y > 10 ∧ x > y)."
    },
    {
      "type": "text",
      "text": "The hypothesis `ex_y` now says that there exists an $y\\in \\mathbb{R}$ such that $y > 10$ and $x > y$. We can add such a $y$ with these properties to the proof progress by writing."
    },
    {
      "type": "code",
      "text": "Choose y such that \n  y_gt_10_and_x_gt_y according to ex_y."
    },
    {
      "type": "text",
      "text": "We can then finish the proof."
    },
    {
      "type": "code",
      "text": "\nIt holds that (x > 10).\nQed."
    }
  ]
}