{
  "exerciseSheet": false,
  "blocks": [
    {
      "type": "text",
      "text": "# Measure theory definitions & notations"
    },
    {
      "type": "code",
      "text": "Require Import Sets.Ensembles.\nRequire Import Sets.Classical_sets.\nRequire Import wplib.Tactics.Tactics.\nRequire Import wplib.Tactics.TacticsContra.\nRequire Import Sets.Powerset.\nRequire Import Coq.Logic.Classical_Pred_Type.\nRequire Import wplib.Notations.SetNotations.\nRequire Import Reals.\n\nOpen Scope ensemble_scope."
    },
    {
      "type": "code",
      "text": "\n"
    },
    {
      "type": "text",
      "text": "## Collections of sets\n### Definitions \nConcerning π-systems, λ-systems, σ-algebras and their properties: "
    },
    {
      "type": "code",
      "text": "(*Variable U : Type. *)\nNotation U := SetNotations.U.\n\nDefinition is_π_system (Π : set_of_subsets U) \n  : Prop := \n    ∀ A : subset U, A ∈ Π ⇒ \n      ∀ B : subset U, B ∈ Π ⇒ \n         (A ∩ B) ∈ Π. \n         \nDefinition countable_union (A : (ℕ → subset U) ) \n  : subset U := \n    ｛ x:U | ∃n : ℕ, x ∈ (A n)｝. \n\nDefinition full_set_in_set (Λ : set_of_subsets U) \n  : Prop :=\n    Ω ∈ Λ. \n\nDefinition complement_in_set (Λ : set_of_subsets U) \n  : Prop := \n    ∀ A  : subset U, A ∈ Λ \n      ⇒ (Ω \\ A) ∈ Λ. \n\nDefinition closed_under_disjoint_countable_union (Λ : set_of_subsets U) \n  : Prop :=\n    ∀ C : (ℕ → (subset U)), \n      (∀ m n : ℕ, m ≠ n ⇒ Disjoint _ (C m) (C n)) \n        ⇒ (∀ n : ℕ, (C n) ∈ Λ) ⇒  (countable_union C) ∈ Λ.\n\nDefinition closed_under_countable_union (Λ : set_of_subsets U) \n  : Prop :=  \n    ∀ C : (ℕ → (subset U)), (∀ n : ℕ, (C n) ∈ Λ) \n      ⇒ (countable_union C) ∈ Λ.\n\nDefinition is_λ_system (Λ : set_of_subsets U) \n  : Prop :=\n    full_set_in_set Λ ∧ \n    complement_in_set Λ ∧\n    closed_under_disjoint_countable_union Λ. \n\nDefinition λ_system_generated_by (A : set_of_subsets U) \n  : (set_of_subsets U) := \n    ｛B : subset U | (∀ Λ : set_of_subsets U, is_λ_system Λ \n       ⇒ (A ⊂ Λ ⇒ B ∈ Λ))｝. \n\nDefinition is_σ_algebra (F : set_of_subsets U) \n  : Prop := \n    full_set_in_set F ∧ \n    complement_in_set F ∧\n    closed_under_countable_union F.\n\nDefinition σ_algebra_generated_by (A : set_of_subsets U) \n  : (set_of_subsets U) := \n    ｛B : subset U | ∀ F : set_of_subsets U, is_σ_algebra F ⇒ (A ⊂ F ⇒ B ∈ F)｝. \n\nDefinition restriction (F : set_of_subsets U) (A : (subset U)) \n  : (set_of_subsets U) := \n    ｛C : subset U | ∃B : subset U, B ∈ F ⇒ C = A ∩ B｝. "
    },
    {
      "type": "text",
      "text": "### Notations \nTo make the definitions above more useable/readable:"
    },
    {
      "type": "code",
      "text": "Notation \"A 'is' 'a' 'π-system'\" := \n  (is_π_system A) (at level 50). \n  \nNotation \"A 'is' 'a' 'λ-system'\" := \n  (is_λ_system A) (at level 50).\n\nNotation \"A 'is' 'a' 'σ-algebra'\" := \n  (is_σ_algebra A) (at level 50).\n(*TODO: general tactic for the form above? *)\n\nNotation \"λ( A )\" := \n (λ_system_generated_by A) (at level 50).\n \nNotation \"σ( A )\" := \n (σ_algebra_generated_by A) (at level 50)."
    },
    {
      "type": "text",
      "text": "### Record types"
    },
    {
      "type": "text",
      "text": "TO DO: The following four procedures are completely analogous. More efficient way?\n\nπ-systems:"
    },
    {
      "type": "code",
      "text": "Record π_system := make_π_system\n  { underlying_set_of_subsets_π : set_of_subsets U;\n    proof_is_π_system : is_π_system underlying_set_of_subsets_π}.\n    \nCoercion underlying_set_of_subsets_π : \n  π_system >-> Ensemble.\n\nHint Resolve proof_is_π_system : measure_theory.\nHint Resolve underlying_set_of_subsets_π : measure_theory."
    },
    {
      "type": "text",
      "text": "λ-systems:"
    },
    {
      "type": "code",
      "text": "\nRecord λ_system := make_λ_system\n  { underlying_set_of_subsets_λ : set_of_subsets U;\n    proof_is_λ_system : is_λ_system underlying_set_of_subsets_λ}.\n    \nCoercion underlying_set_of_subsets_λ : \n  λ_system >-> Ensemble.\n\nHint Resolve proof_is_λ_system : measure_theory.\nHint Resolve underlying_set_of_subsets_λ : measure_theory.\n\n"
    },
    {
      "type": "text",
      "text": "σ-algebras:"
    },
    {
      "type": "code",
      "text": "Record σ_algebra := make_σ_algebra\n  { underlying_set_of_subsets_σ : set_of_subsets U;\n    proof_is_σ_algebra : is_σ_algebra underlying_set_of_subsets_σ}.\n\nCoercion underlying_set_of_subsets_σ : \n  σ_algebra >-> Ensemble.\n\nHint Resolve proof_is_σ_algebra : measure_theory.\nHint Resolve underlying_set_of_subsets_σ : measure_theory."
    },
    {
      "type": "text",
      "text": "A collection that is both a π-system and a λ-system (mostly for proof of π_and_λ_is_σ): "
    },
    {
      "type": "code",
      "text": "Record π_and_λ_system := make_π_and_λ_system\n  { underlying_set_of_subsets_π_and_λ : set_of_subsets U;\n    proof_is_π_and_λ_system : (is_λ_system underlying_set_of_subsets_π_and_λ \n      /\\ is_π_system underlying_set_of_subsets_π_and_λ)}.\n      \nCoercion underlying_set_of_subsets_π_and_λ : \n  π_and_λ_system >-> Ensemble.\n\nHint Resolve proof_is_π_and_λ_system : measure_theory.\nHint Resolve underlying_set_of_subsets_π_and_λ : measure_theory.\n"
    },
    {
      "type": "text",
      "text": "### Notations: \nDeclare Scope measure_theory_scope.\nNotation \"A ∈ F\" := \n  (A ∈ underlying_set_of_subsets_σ F) \n    (at level 55) : measure_theory_scope. "
    },
    {
      "type": "text",
      "text": "## Measures"
    },
    {
      "type": "text",
      "text": "### Definitions \nOf σ-additivity, measure and probability measure:"
    },
    {
      "type": "code",
      "text": "Definition σ_additive_on F (μ : (subset U ⇨ ℝ)) : Prop := \n  ∀ C : (ℕ → (subset U)), (∀ n : ℕ, C n ∈ F) \n    ⇒ (∀ m n : ℕ, m ≠ n ⇒ Disjoint _ (C m) (C n)) \n      ⇒ infinite_sum (fun (n:ℕ) ↦ (μ (C n))) (μ (countable_union C)).\n      \nDefinition is_measure_on F (μ : (subset U → ℝ)) : Prop := \n  μ ∅ = 0 ∧ σ_additive_on F μ.\n  \nDefinition is_probability_measure_on F (μ : (subset U → ℝ)) \n  : Prop := \n    is_measure_on F μ ∧ μ Ω = 1."
    },
    {
      "type": "text",
      "text": "### Notations"
    },
    {
      "type": "code",
      "text": "Notation \"μ 'is' 'σ-additive' 'on' F\" := \n  (σ_additive_on F μ) (at level 50). \n  \nNotation \"μ 'is' 'a' 'measure' 'on' F\" := \n  (is_measure_on F μ) (at level 50). "
    },
    {
      "type": "text",
      "text": "### Measures as record types"
    },
    {
      "type": "code",
      "text": "Definition set_function {U} := (subset U ⇨ ℝ).\n\nRecord measure_on {F} := make_measure \n  { underlying_function : set_function; \n    proof_is_measure : is_measure_on F underlying_function}.\n    \n\nCoercion underlying_function : measure_on >-> set_function.\n\n\nHint Resolve underlying_function : measure_theory.\nHint Resolve proof_is_measure : measure_theory.\n\n"
    },
    {
      "type": "text",
      "text": "# Hints"
    },
    {
      "type": "code",
      "text": "Hint Resolve Full_intro : measure_theory.  \nHint Resolve Intersection_intro : measure_theory. \nHint Resolve Union_introl Union_intror : measure_theory. \nHint Resolve Disjoint_intro : measure_theory. "
    }
  ]
}