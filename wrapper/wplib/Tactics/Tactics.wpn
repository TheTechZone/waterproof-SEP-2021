{
  "exerciseSheet": false,
  "blocks": [
    {
      "type": "code",
      "text": "(** * Syntax extensions for Computer programs for analysis\n\n      This document contains some very preliminary experiments with \n      notations, ltac definitions and tactic notations to make it possible \n      to stay closer to mathematical language when writing proofs in Coq. *)\n\n(** This file is supposed to be put in a folder \n    WaterProof/Tactics/ and intended to be compiled, \n    with \n    sertop --mode=vo \n           -R \"WaterProof\",\"WaterProof\"\n           \"WaterProof/Tactics/Tactics.v\"*)\n\nRequire Import Rbase.\nRequire Import Rfunctions.\nRequire Import SeqSeries.\nRequire Import Rtrigo.\nRequire Import Ranalysis.\nRequire Import Integration.\nRequire Import micromega.Lra.\nRequire Import Omega.\nRequire Import Max.\n(* Require Import Unicode.Utf8. *)\n\n(** * Custom notations\n    \n    Notations are variations on the ones in Unicode.Utf8 *)\n\n(** Guarantee indentation and introduce custom notation for forall *)\nNotation \"'for' 'all' x .. y , P\" := (forall x, .. (forall y, P) ..)\n  (at level 200, x binder, y binder, right associativity,\n  format \"'[ ' '[ ' for  all  x .. y ']' , '//'  P ']'\") : type_scope.\n\nNotation \"∀ x .. y , P\" := (forall x, .. (forall y, P) ..)\n  (at level 200, x binder, y binder, right associativity,\n  only parsing) : type_scope.\n\nNotation \"'there' 'exists' x .. y , P \" := (exists x, .. (exists y, P) ..)\n  (at level 200, x binder, y binder, right associativity,\n  format \"'[ ' '[ ' there  exists  x .. y  ']' , '//'  P ']'\") : type_scope.\n\nNotation \"∃ x .. y , P \" := (exists x, .. (exists y, P) ..)\n  (at level 200, x binder, y binder, right associativity,\n  only parsing) : type_scope.\n\nNotation \"'fun' x .. y '↦' t\" := (fun x => .. (fun y => t) ..)\n  (at level 200, x binder, y binder, right associativity,\n  format \"'[ ' '[ ' 'fun' x .. y ']' '↦' '/' t ']'\").\n\nNotation \"x ∨ y\" := (x \\/ y) (at level 85, right associativity) : type_scope.\nNotation \"x ∧ y\" := (x /\\ y) (at level 80, right associativity) : type_scope.\nNotation \"x → y\" := (x -> y)\n  (at level 99, y at level 200, right associativity,\n   only parsing): type_scope.\nNotation \"x ⇒ y\" := (x -> y)\n  (at level 99, y at level 200, right associativity,\n   only parsing): type_scope.\n(* the notation below is fun, but is no good for functions *)\n(* need to see if this can be adapted so it only uses \n   this notation for propositions *)\n(*Notation \"'if' x 'then' y\" := (x -> y)\n  (at level 99, y at level 200, right associativity): prop_scope.*)\nNotation \"x ⇨ y\" := (x -> y)\n  (at level 99, y at level 200, right associativity): type_scope.\n\nNotation \"x ↔ y\" := (x <-> y) (at level 95, no associativity): type_scope.\nNotation \"x ⇔ y\" := (x <-> y) (at level 95, no associativity): type_scope.\nNotation \"¬ x\" := (~x) (at level 75, right associativity) : type_scope.\nNotation \"x ≠ y\" := (x <> y) (at level 70) : type_scope.\n\nNotation \"x ≤ y\" := (le x y) (at level 70, no associativity) : nat_scope.\nNotation \"x ≥ y\" := (ge x y) (at level 70, no associativity) : nat_scope.\n\nNotation \"x ≤ y\" := (x <= y)%R (at level 70, no associativity) : R_scope.\nNotation \"x ≥ y\" := (x >= y)%R (at level 70, no associativity) : R_scope.\n\nOpen Scope R_scope.\n\n(* TODO: the below definition doesn't work very nicely *)\nNotation \"x ↦ y\" := (fun x => y) (at level 0).\n\nNotation \"'ℕ'\" := (nat).\nNotation \"'ℝ'\" := (R).\n\n(** Add field and lra to tactics to try automatically *)\n\nHint Extern 3 ( _ = _ ) => field : real.\nHint Extern 3 ( _ <= _ ) => lra : real.\nHint Extern 3 ( _ >= _ ) => lra : real.\nHint Extern 3 ( _ < _ ) => lra : real.\nHint Extern 3 ( _ > _ ) => lra : real.\n\n(** * Custom tactics *)\n\n(** ** A powertool *)\n\n(* TODO: in some cases, eauto has left some existentials.\n   this may be undesired, but eauto can be very powerful...\n   one option is to let waterproof check whether \n   existentials are created and block this behavior. *)\n\nLtac wp_power :=\n  first [ progress info_auto with *\n(*        | omega\n        | field \n        | lra *)\n        | progress info_eauto with *].\n\n(** ** Intro-based tactics *)\n\n(** A strict version of intro with pattern matching *)\nLtac intro_strict s t :=\n  match goal with\n    | [ |- forall _ : t, _ ] => intro s\n  end.\n\n(** Envisioned use of intro_strict tactic. \n    The user should for instance be able to write:\n      Take eps : R.\n    With respect to the usual intro tactic, the system now also \n    checks the type of the variable to be introduced. *)\nTactic Notation \"Take\" ident(s) \":\" constr(t):=\n  intro_strict s t.\n\n(** Practically the same tactic as above, \n    except the envisioned use is when you want to write \"Assume ...\"\n    and actually specify in Coq code what you need to assume *)\nLtac assume_strict s t :=\n  match goal with\n    | [ |- t -> _ ] => intro s\n  end.\n\nTactic Notation \"Assume\" ident(s) :=\n  intro s.\n\nTactic Notation \"Assume\" ident(s) \"of\" \"type\" constr(t) :=\n  assume_strict s t.\n\nTactic Notation \"Assume\" ident(s) \":\" constr(t) :=\n  assume_strict s t.\n\nLtac test_tac t :=\n  match type of t with \n    |  ?T  => idtac T\n  end.\n\n(** ** Checking the context\n       The following tactics let the user record in the proof script various\n       aspects of the current context *)\n\n(** The tactic call (goal_check t) checks if the current goal \n    can equivalently be written as t, otherwise it fails. *)\n(** TODO May be much better to change the goal to the new formulation *)\nLtac goal_check t :=\n  tryif (change t) \n    then (idtac \"We indeed need to show that\" t)\n    else fail \"This is not the current goal\".\n\n(** Make it possible to verify the goal t by writing\n    \"We need to show that t\". *)\nTactic Notation \"We\" \"need\" \"to\" \"show\" \"that\" constr(t) :=\n  goal_check t.\n\n(** Make it possible to verify the goal t by writing\n    \"To show : t\". *)\nTactic Notation \"To\" \"show\" \":\" constr(t) :=\n  goal_check t.\n\n(** The tactic (hypo_check s t) checks if t is one of the \n    current hypothesis, and if so, it renames it into s *)\nLtac hypo_check s t:=\nmatch goal with \n| [H : t |- _] => rename H into s\n| _ => fail\nend.\n\n(** Apply with goal check\n    The next tactics verify whether certain steps have the desired effect. *)\nLtac new_goal_verified_apply s t :=\n  apply s;\n  match goal with \n  | [|- t] => idtac \"Expected goal was produced\"\n  | _ => fail \"Lemma did not produce expected outcome\"\n  end.\n\n(*Tactic Notation \"By\" constr(s) \n  \"it\" \"suffices\" \"to\" \"show\" \"that\"\n  constr(t) :=\n  new_goal_verified_apply s t.*)\n\n(** A powerful forward reasoning tactic. \n    The sequential trying of auto and eauto \n    is there because eauto can be much slower. \n    TODO: is this what we want? *)\nLtac new_hyp_verified_pose_proof s t u:=\n  assert (u : t) by first [ progress info_auto using s with *\n                          | progress info_eauto using s with *\n                          | fail \"Could not find a proof.\"].\n  (*;\n  match goal with\n  | [u : t |- _] => idtac \"Outcome matched\"\n  | _ => fail \"Unexpected outcome obtained\"\n  end.*)\n\nTactic Notation \"By\" constr(s)\n  \"it\" \"holds\" \"that\" constr(t) \"(\"ident(u)\")\"\n  := new_hyp_verified_pose_proof s t u.\n\n(*Tactic Notation \"By\" constr(s0) \",\" constr(s1)\n  \"it\" \"holds\" \"that\" constr(t) \"(\"ident(u)\")\"\n  :=*) \n\n(** ** Instantiating variables that exist *)\n\nTactic Notation \"Choose\" constr(t):=\n  exists t.\n\nTactic Notation \"Choose\" ident(s) \":=\" constr(t) :=\n  exists t.\n\nTactic Notation \"Choose\" ident(s) \n                \"such\" \"that\" ident(u)\n                \"according\" \"to\" constr(v) (*\":\" constr(t)*):=\n  destruct v as [s u].\n\n(*Tactic Notation \"Choose\" ident(s)\n                \"such\" \"that\" ident(u)\n                \"according\" \"to\" ident(v)\n                \"with\" constr(t) :=\n  destruct v with t as [s u]. *)\n\nTactic Notation \"Choose\" ident(s)\n                \"such\" \"that\" ident(u)\n                \"according\" \"to\" constr(v)\n                \"with\" constr(t) :=\n  destruct v with t as [s u].\n\n(** ** Forward reasoning *)\n\nTactic Notation \"Because\" ident(s) \n  \"both\" ident(u) \"and\" ident(v) :=\n  destruct s as [u v].\n\nTactic Notation \"Because\" ident(s) \n  \"both\" ident(u) \":\" constr(t_u)\n  \"and\"  ident(v) \":\" constr(t_v):=\n  destruct s as [u v].\n\nTactic Notation \"Because\" ident(s)\n  \"either\" ident(u) \"or\" ident(v) :=\n  destruct s as [u | v].\n\n(* TODO: align syntax with \"By ... it holds that\" *)\nTactic Notation \"It\" \"holds\" \"that\"\n  constr(t) \"(\" ident(u) \")\" :=\n  assert (u : t) by first [ progress info_auto with *\n                          | progress info_eauto with *\n                          | fail \"Failed to find a proof\"].\n\nTactic Notation \"It\" \"holds\" \"that\"\n  constr(t) :=\n  match goal with\n  | [|-t] => wp_power\n  | _ => fail \"No proof dound or provided statement does not correspond to current goal.\"\n  end.\n\nTactic Notation \"It\" \"follows\" \"that\"\n  constr(t) :=\n  match goal with\n  | [|-t] => wp_power\n  | _ => fail \"No proof found or provided statement does not correspond to current goal\"\n  end.\n\n(* TODO: preferably deprecate this notation *)\n\nTactic Notation \"This\" \"follows\" \"immediately\" :=\n  wp_power.\n\nTactic Notation \"follows\" \"immediately\" := \n  wp_power.\n\nTactic Notation \"This\" \"follows\" \"by\" \"assumption\" := \n  assumption.\n\n(*Tactic Notation \"It\" \"holds\" \"that\"\n  constr(t) \"(\" ident(u) \")\" :=\n  assert (u : t) by (auto with real).\n\nTactic Notation \"It\" \"holds\" \"that\"\n  constr(t) :=\n  assert (t) by (auto with real).*)\n\n(** ** Claims *)\n\nTactic Notation \"We\" \"claim\" \"that\" \n  constr(t) \"(\" ident(u) \")\" :=\n  assert (u : t).\n\n(*Tactic Notation \"It\" \"holds\" \"that\"\n  ident(u) \":\" constr(t) :=\n  assert (u : t) by (info_auto with real).*)\n\n(** ** Rewriting \n    TODO: add rewrite with at\n    TODO: add support for rewriting in \n          and at multiple places at once \n    TODO: clear the proved equality? *)\n\nTactic Notation \"Rewrite\" \"using\" constr(t) :=\n  let u := fresh in\n    assert (u : t) by wp_power;\n  rewrite u.\n\nTactic Notation \"rewrite\" \"using\" constr(t) :=\n  let u := fresh in\n    assert (u : t) by wp_power;\n  rewrite u.\n\nTactic Notation \"Rewrite\" \"using\" constr(t) \"in\" ident(s):=\n  let u := fresh in\n    assert (u : t) by wp_power;\n  rewrite u in s.\n\nTactic Notation \"rewrite\" \"using\" constr(t) \"in\" ident(s):=\n  let u := fresh in\n    assert (u : t) by wp_power;\n  rewrite u in s.\n\nTactic Notation \"Rewrite\" \"<-\" \"using\" constr(t) :=\n  let u := fresh in \n    assert (u : t) by (info_auto with *);\n  rewrite<-u.\n\n(** A different notation for apply. It is important to note that \n    when using constr(t) instead of uconstr(t), the use of wildcards \n    is no longer possible. *)\nTactic Notation \"Apply\" uconstr(t) :=\n  apply t.\n\n(** TODO: write an equivalent for using apply with *)\n\n(** A different notation for the unfold tactic.\n\n    TODO: find ways to add further options \n    with these tactics.\n   *)\nTactic Notation \"Unfold\" constr(t) :=\n  unfold t.\n\nTactic Notation \"Unfold\" constr(t) \"in\" ident(s):=\n  unfold t in s.\n\nTactic Notation \"Expand\" \"the\" \"definition\" \"of\" reference(t) :=\n  unfold t.\n\nTactic Notation \"Expand\" \"the\" \"definition\" \"of\" \n  reference(t) \"in\" ident(s) :=\n  unfold t in s.\n\n(** ** Strings of (in)equalities.\n  \n  The following tactics should help in situations \n  where in a pen-and-paper proof we would write a \n  string of equalities and inequalities.\n    *)\n\n(** The tactic trans_ineq eq_or_ineq reduces \n    the inequality in the goal to a new one by using\n    eq_or_ineq. *)\nLtac trans_ineq eq_or_ineq := \n  match goal with \n  | [|-?x <= ?z] => \n    match (type of eq_or_ineq) with \n    | (x <= ?y) => apply (Rle_trans x y z eq_or_ineq)\n    | _ => idtac \"not a less-than-or-equal-to inequality\"\n    end\n  | _ => idtac \"Goal is not a less-than-or-equal-to inequality.\"\n  end.\n\n(** ** Defining new variables *)\n\nTactic Notation \"Define\" ident(u) \":=\" constr(t) :=\n  set (u := t).\n\n(** ** Reflexivity *)\n\nTactic Notation \"This\" \"follows\" \"by\" \"reflexivity\" :=\n  reflexivity.\n\n(** ** Simplification *)\n\n(** TODO: The following tactic notation may need \n    to be improved. *)\nTactic Notation \"Simplify\" \"what\" \"we\" \"need\" \"to\" \"show\" :=\n  simpl.\n\nLemma test : (1 + 1 = 2)%nat.\nProof.\nWe claim that (1 + 1 = 2)%nat (H1).\nsimpl. reflexivity. rewrite using ((1+1)%nat = 2%nat).\nreflexivity.\nQed."
    }
  ]
}